import asyncio
import logging
import csv
import os
from datetime import datetime, timezone
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from transformers import pipeline
import pandas as pd
from config import BOT_TOKEN

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –≥—Ä—É–∑–∏–º –º–æ–¥–µ–ª—å - –¥–æ–ª–≥–æ –Ω–æ –æ–¥–∏–Ω —Ä–∞–∑
try:
    model = pipeline(
        "sentiment-analysis",
        model="blanchefort/rubert-base-cased-sentiment",
        return_all_scores=True
    )
    print("–º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞")
except Exception as e:
    print(f"–º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å: {e}")
    model = None

def create_data_folder():
    if not os.path.exists('data'):
        os.makedirs('data')

def save_to_csv(user_id, text, result, probs):
    create_data_folder()
    
    csv_path = 'data/requests.csv'
    is_new_file = not os.path.isfile(csv_path)
    
    with open(csv_path, 'a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        
        if is_new_file:
            # –∑–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow([
                'timestamp', 'user_id', 'text', 'sentiment', 
                'positive_prob', 'negative_prob', 'neutral_prob'
            ])
        
        # –æ–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        short_text = text[:500] if len(text) > 500 else text
        
        writer.writerow([
            datetime.now(timezone.utc).isoformat(),
            user_id,
            short_text,
            result,
            probs.get('positive', 0),
            probs.get('negative', 0),
            probs.get('neutral', 0)
        ])

def check_mood(text):
    if not model:
        return None, {}
    
    try:
        results = model(text)[0]
        
        probs = {}
        mood = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
        best_score = 0
        
        for r in results:
            label = r['label'].lower()
            score = r['score']
            
            # TODO: –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            if 'positive' in label or 'pos' in label:
                probs['positive'] = round(score * 100, 1)
                if score > best_score:
                    best_score = score
                    mood = "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π"
            elif 'negative' in label or 'neg' in label:
                probs['negative'] = round(score * 100, 1) 
                if score > best_score:
                    best_score = score
                    mood = "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π"
            else:
                probs['neutral'] = round(score * 100, 1)
                if score > best_score:
                    best_score = score
                    mood = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
        
        # –∑–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ
        for category in ['positive', 'negative', 'neutral']:
            if category not in probs:
                probs[category] = 0.0
                
        return mood, probs
        
    except Exception as e:
        print(f"–æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return None, {}

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ü–∏—à–∏ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç - —è —Å–∫–∞–∂—É –∫–∞–∫–æ–µ —É –Ω–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üòä\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    )

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    try:
        csv_path = 'data/requests.csv'
        if not os.path.exists(csv_path):
            await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—Å–∞–ª")
            return
            
        df = pd.read_csv(csv_path)
        
        total = len(df)
        
        # —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è–º
        mood_counts = df['sentiment'].value_counts()
        mood_percent = (mood_counts / total * 100).round(1)
        
        # —Å—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞
        avg_len = df['text'].str.len().mean()
        
        response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        response += f"üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total}\n\n"
        response += f"üìà –ü–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è–º:\n"
        
        for mood, percent in mood_percent.items():
            response += f"‚Ä¢ {mood}: {percent}%\n"
            
        response += f"\nüìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {avg_len:.0f} —Å–∏–º–≤–æ–ª–æ–≤"
        
        await message.answer(response)
        
    except Exception as e:
        print(f"–æ—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π")

@dp.message(F.text)
async def handle_text(message: types.Message):
    if not model:
        await message.answer("–ú–æ–¥–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ")
        return
    
    text = message.text
    user_id = message.from_user.id
    
    # –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    mood, probs = check_mood(text)
    
    if mood is None:
        await message.answer("–ù–µ —Å–º–æ–≥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç")
        return
    
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ csv
    save_to_csv(user_id, text, mood, probs)
    
    # –≤—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
    if mood == "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π":
        emoji = "üòä"
    elif mood == "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π":
        emoji = "üòû" 
    else:
        emoji = "üòê"
    
    # –æ—Ç–≤–µ—á–∞–µ–º
    answer = f"{emoji} –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: **{mood}**\n\n"
    answer += "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:\n"
    answer += f"‚Ä¢ –ü–æ–∑–∏—Ç–∏–≤: {probs['positive']}%\n"
    answer += f"‚Ä¢ –ù–µ–≥–∞—Ç–∏–≤: {probs['negative']}%\n"
    answer += f"‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª: {probs['neutral']}%"
    
    await message.answer(answer, parse_mode="Markdown")

async def main():
    print("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())